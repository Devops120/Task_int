node('<<NODE-NAME>>') {
    deleteDir()
    try {
     stage ('code checkout') {
         sh '''
         git clone https://github.com/webfirmframework/tomcat-8-wffweb-demo-apps 
        '''
       } 
     stage ('Create artifact') {
         sh '''
         cd $JENKINS_HOME/tomcat-8*/
         jar -cvf web.jar .  
        '''
       }
     stage ('Publish Jar file to the Repo') {
         sh '''
         curl -sSf -H "X-JFrog-Art-Api:<API_KEY>" \
       -X PUT \
       -T web.jar \
       'http(s)://<ARTIFACTORY_URL>/<REPO>/<PATH>/web.jar'
        '''
       }       
      stage ('Create Docker image and publish it to docker registry') {
         sh '''
         git clone <docker-url> 
         docker build -t <docker-registry>/<docker-image>:<docker_version>
         # assuming that the docker file is published on the git hub repo, at this step the web.jar will be copied to the docker image under the tomcat webapps folder 
         docker push 
         # this step completes pushing to the container registry and deployment is optional.  
        '''
       }

    
}catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
  }

}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]"
  def summary = "${subject} (<${env.BUILD_URL}|Open>)"
  def details = """<p>STARTED: Deployment '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (channel: '#test-data',color: colorCode, message: summary)

  }

